<!DOCTYPE html>
<html>
    <head>
        <meta charset="UTF-8">
        <title>{% block title %}DBC{% endblock %}</title>
        {% block stylesheets %}
            <link rel="stylesheet" 
                  href="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/css/bootstrap.min.css" 
                  integrity="sha384-ggOyR0iXCbMQv3Xipma34MD+dH/1fQ784/j6cY/iJTQUOhcWr7x9JvoRxT2MZw1T" 
                  crossorigin="anonymous">
            <link rel="stylesheet" href="//code.jquery.com/ui/1.12.1/themes/base/jquery-ui.css">
            <link rel="stylesheet" 
                  href="https://use.fontawesome.com/releases/v5.7.2/css/all.css" 
                  integrity="sha384-fnmOCqbTlWIlj8LyTjo7mOUStjsKC4pOpQbqyi7RrhN7udi9RwhKkMHpvLbHG9Sr" 
                  crossorigin="anonymous">
            <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.15/css/bootstrap-multiselect.css">
            
            <style>
                body {
                    min-height:100vh;
                }
                
                main {
                    padding: 16px 0 16px 0;
                }

                .flex-fill {
                    flex:1 1 auto;
                } 
 
                .ui-autocomplete {
                    position: absolute;
                    z-index: 1000;
                    cursor: default;
                    padding: 0;
                    margin-top: 2px;
                    list-style: none;
                    background-color: #ffffff;
                    border: 1px solid #ccc;
                    -webkit-border-radius: 5px;
                       -moz-border-radius: 5px;
                            border-radius: 5px;
                    -webkit-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
                       -moz-box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
                            box-shadow: 0 5px 10px rgba(0, 0, 0, 0.2);
                }
                .ui-autocomplete > li {
                    padding: 3px 20px;
                    cursor:pointer;
                }
                .ui-autocomplete > li.ui-state-focus {
                    background-color: #DDD;
                }
                .ui-helper-hidden-accessible {
                    display: none;
                }
                .multiselect-container {
                    min-width: 12rem
                }
                .multiselect-container > li > a {
                    color: #212529
                }
                .multiselect-native-select {
                    border: 1px solid #ced4da;
                    border-radius: .25rem;                    
                }
           
            </style>
        {% endblock %}
    </head>
    <body class="d-flex flex-column">
        <div class="container-fluid">
            <div class="row">
                {% block navbar %}{% endblock %}
            </div>
        </div>
        <div class="container flex-fill">    
            {% block info %}{% endblock %}
            <main>
                {% block body %}{% endblock %}
            </main>
        </div>
        <div class="container-fluid">
            <div class="row">
                {% block footer %}{% endblock %}
            </div>            
        </div>
        {% block javascripts %}
            <script src="https://ajax.googleapis.com/ajax/libs/jquery/3.3.1/jquery.min.js"></script>        
            <script src="https://code.jquery.com/ui/1.12.1/jquery-ui.js"></script>        
            <script src="https://cdnjs.cloudflare.com/ajax/libs/popper.js/1.14.7/umd/popper.min.js" 
                    integrity="sha384-UO2eT0CpHqdSJQ6hJty5KVphtPhzWj9WO1clHTMGa3JDZwrnQq4sF86dIHNDz0W1" 
                    crossorigin="anonymous"></script> 
            <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.3.1/js/bootstrap.min.js" 
                    integrity="sha384-JjSmVgyd0p3pXB1rRibZUAYoIIy6OrQ6VrjIEaFf/nJGzIxFDsf4x0xIM+B07jRM" 
                    crossorigin="anonymous"></script> 
            <script src="https://cdnjs.cloudflare.com/ajax/libs/bootstrap-multiselect/0.9.15/js/bootstrap-multiselect.min.js"></script>              

            <script>

                $(document).ready(function() {       
                    function split( val ) {
                      return val.split( /,\s*/ );
                    }
                    function extractLast( term ) {
                      return split( term ).pop();
                    }
                    
                    $("#app_transfer_customer")
                        .on( "change", function( event ) {
                            $("#app_transfer_files").val('');
                        });
                        
                    $("#app_transfer_files")
                        .on( "keydown", function( event ) {
                            if ( event.keyCode === $.ui.keyCode.TAB && $( this ).autocomplete( "instance" ).menu.active ) {
                                event.preventDefault();
                            }
                        })
                        .autocomplete({
                            source: function( request, response ) {
                                var lastIndex = request.term.lastIndexOf(",");
                                var term = request.term.substring(lastIndex + 1);
                                var customer = $( "#app_transfer_customer" ).val();
                                $.getJSON( "http://localhost:8000/admin/file/api/"+term.trim()+"/"+customer, {}, response );
                            },
                            search: function() {
                                var term = extractLast( this.value );
                                if ( term.length < 1 ) {
                                    return false;
                                }
                            },
                            focus: function() {
                                return false;
                            },
                            select: function( event, ui ) {
                                var terms = split( this.value );
                                terms.pop();
                                terms.push( ui.item.value );
                                terms.push( "" );
                                this.value = terms.join( ", " );
                                return false;
                            },
                            response: function(event, ui) {
                                if (!ui.content.length) {
                                    var noResult = { value: "", label: "No results" };
                                    ui.content.push(noResult);
                                }
                            }                            
                        });
                        
                    $('.multiple').multiselect({
                        buttonText: function(options, select) {
                            if (options.length === 0) {
                                return 'All';
                            } else {
                                var labels = [];
                                options.each(function() {
                                    if ($(this).attr('label') !== undefined) {
                                        labels.push($(this).attr('label'));
                                    } else {
                                        labels.push($(this).html());
                                    }
                                });
                                return labels.join(', ') + '';
                            }                            
                        }
                    });
                    
                    $("[data-toggle=popover]").popover();
                    
                    $('.popover-dismiss').popover({
                        trigger: 'focus'
                    });
                    
                    $(function() {
                        $( ".datepicker" ).datepicker({ 
                            dateFormat: 'dd-mm-yy',
                            changeMonth: true,
                            changeYear: true                            
                        });
                    });

                    $("#print").click(function() {
                        var content = $(".printable").html();
                        var metadata = $("#metadata").html();
                        metadata.replace('hidden', '');
         
                        $.ajax({
                            url: 'http://localhost:8000/print',
                            method: 'POST',
                            data: { content: content, metadata: metadata },
                            xhrFields: {
                                responseType: 'blob'
                            },
                            success: function (response, status, xhr) {
                                var filename = "";                   
                                var disposition = xhr.getResponseHeader('Content-Disposition');

                                 if (disposition) {
                                    var filenameRegex = /filename[^;=\n]*=((['"]).*?\2|[^;\n]*)/;
                                    var matches = filenameRegex.exec(disposition);
                                    if (matches !== null && matches[1]) filename = matches[1].replace(/['"]/g, '');
                                } 
                                var linkelem = document.createElement('a');
                                try {
                                                           var blob = new Blob([response], { type: 'application/octet-stream' });                        

                                    if (typeof window.navigator.msSaveBlob !== 'undefined') {
                                        //   IE workaround for "HTML7007: One or more blob URLs were revoked by closing the blob for which they were created. These URLs will no longer resolve as the data backing the URL has been freed."
                                        window.navigator.msSaveBlob(blob, filename);
                                    } else {
                                        var URL = window.URL || window.webkitURL;
                                        var downloadUrl = URL.createObjectURL(blob);

                                        if (filename) { 
                                            // use HTML5 a[download] attribute to specify filename
                                            var a = document.createElement("a");

                                            // safari doesn't support this yet
                                            if (typeof a.download === 'undefined') {
                                                window.location = downloadUrl;
                                            } else {
                                                a.href = downloadUrl;
                                                a.download = filename;
                                                document.body.appendChild(a);
                                                a.target = "_blank";
                                                a.click();
                                            }
                                        } else {
                                            window.location = downloadUrl;
                                        }
                                    }   

                                } catch (ex) {
                                    console.log(ex);
                                } 
                            }     
                        });
                    });                    
                });

            </script>
              
        {% endblock %}
    </body>
</html>
